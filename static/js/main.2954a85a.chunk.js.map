{"version":3,"sources":["../../src/utils.ts","../../src/index.tsx","App.tsx","index.tsx"],"names":["filterBlock","blockObj","filters","Object","textId","tag","obj","DittoContext","createContext","error","message","returnValue","console","nullError","fragmentError","React","useDitto","props","projectId","frameId","blockId","copy","useContext","project","frame","frameObj","filterFrame","block","DittoDefault","children","otherProps","data","DittoText","text","useDittoSingleText","Ditto","getDittoType","source","value","Page","keys","map","id","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2954a85a.chunk.js","sourcesContent":["\n//Utility functions for ditto-react (Ditto and DittoProvider)\n\n//returns block filtered by parameters provided in filters\nexport const filterBlock = (blockObj, filters) => {\n  const block = Object.keys(blockObj).filter(textId => {\n    if (!filters || !filters.tags) return true;\n    return filters.tags.every(tag => (\n      blockObj[textId].tags &&\n      blockObj[textId].tags.includes(tag)\n    ));\n  }).reduce((obj, id) => {\n    obj[id] = blockObj[id].text;\n    return obj;\n  }, {});\n  return block;\n}\n\nexport const filterFrame = (frameObj, filters) => {\n  if (frameObj.blocks) {\n    for (var blockId in frameObj.blocks) {\n      frameObj.blocks[blockId] = filterBlock(frameObj.blocks[blockId], filters);\n    }\n  }\n  frameObj.otherText = filterBlock(frameObj.otherText, filters);\n  return frameObj;\n}\n","import React, { createContext, useContext } from 'react'\n\nimport { filterBlock, filterFrame } from './utils';\n\ninterface Text {\n  text: string;\n  tags: string[];\n}\n\ninterface DittoContext {\n  projects: {\n    [projectId: string]: {\n      project_name: string;\n      frames: {\n        [frameId: string]: {\n          frameName: string;\n          blocks: {\n            [blockId: string]: {\n              [textId: string]: Text;\n            }\n          }\n          otherText?: {\n            [textId: string]: Text;\n          }\n        }\n      }\n    }\n  } \n}\n\nexport const DittoContext = createContext({} as DittoContext)\n\nconst error = (message: string, returnValue: any = message) => {\n  console.error(message);\n  return returnValue;\n};\n\nconst nullError = (message) => error(message, null);\nconst fragmentError = (message) => error(message, <React.Fragment />);\n\nconst useDittoSingleText = ({ projectId, textId }) => {\n  const copy = useContext(DittoContext);\n\n  if (!projectId) \n    return nullError('No Project ID provided.');\n  \n  const project = copy.projects[projectId];\n\n  for (const frameId in project.frames) {\n    const frame = project.frames[frameId];\n\n    for (const blockId in frame.blocks) {\n      const block = frame.blocks[blockId];\n\n      if (textId in block) \n        return block[textId].text\n    }\n\n    if (frame.otherText && textId in frame.otherText) \n      return frame.otherText[textId].text\n  }\n\n  return error(`[Text not found in Ditto project with ID: [${textId}]]`);\n}\n\ninterface useDittoProps {\n  projectId: string;\n  frameId: string;\n  blockId?: string;\n  filters?: {\n    tags: string[];\n  }\n}\n\nconst useDitto = (props: useDittoProps) => {\n  const { projectId, frameId, blockId, filters } = props;\n  const copy = useContext(DittoContext);\n\n  if (!copy.projects) \n    return nullError('Source JSON for DittoProvider does not have projects.');\n\n  if (!projectId) \n    return nullError('No Project ID provided.');\n\n  const project = copy.projects[projectId];\n\n  if (!frameId) {\n    return nullError('No Frame ID provided.');\n  }\n  if (!(frameId in project.frames)) \n    return nullError(`Frame of ID [${frameId}] not found in this Ditto project.`);\n\n  const frame = project.frames[frameId];\n\n  if (!blockId) \n    return filterFrame(frame, filters);\n\n  if (!(blockId in frame.blocks)) \n    return nullError(`Block of ID [${blockId}] not found in frame of ID [${frameId}] in this Ditto project.`);\n  \n  const block = frame.blocks[blockId];\n  \n  return filterBlock(block, filters);\n}\n\ninterface DittoDefaultProps {\n  projectId: string;\n  frameId: string;\n  blockId?: string;\n  filters?: {\n    tags: string[];\n  }\n  // TODO: type data \n  children: (data: any) => React.ReactNode;\n}\n\nconst DittoDefault = (props: DittoDefaultProps) => {\n  const { children, ...otherProps } = props;\n  const data = useDitto(otherProps);\n\n  const childIsFunction = typeof children === 'function';\n\n  if (!data)\n    return <React.Fragment />;\n\n  if (!childIsFunction) \n    return fragmentError(`Please provide either a textId or function child to your Ditto component.`);\n\n  return props.children(data);\n};\n\ninterface DittoTextProps {\n  projectId: string;\n  textId: string;\n}\n\nconst DittoText = (props: DittoTextProps) => {\n  const { projectId, textId } = props;\n  const text = useDittoSingleText({ projectId, textId });\n\n  return (\n    <React.Fragment>\n      {text}\n    </React.Fragment>\n  )\n}\n\ntype DittoProps = DittoDefaultProps | DittoTextProps;\n\nfunction getDittoType(props: DittoProps) {\n  if ('textId' in props) {\n    return 'text';\n  }\n\n  return 'default';\n}\n\nexport const Ditto = (props: DittoProps) => {\n  if (!props.projectId) \n    return fragmentError('No Project ID provided to Ditto component.');\n\n  const type = getDittoType(props);\n\n  switch (type) {\n    case 'text':\n      return <DittoText {...(props as DittoTextProps)} />;\n    default:\n      return <DittoDefault {...(props as DittoDefaultProps)} />;\n  }\n}\n\nconst DittoProvider = ({ children, source }) => {\n  return (\n    <DittoContext.Provider value={source}>\n      {children}\n    </DittoContext.Provider>\n  )\n}\n\nexport default DittoProvider;\n","import DittoProvider, { Ditto } from 'ditto-react-2'\nimport source from './ditto/text.json';\n\nconst App = () => {\n  return (\n    <DittoProvider source={source}>\n      <Page /> \n    </DittoProvider>\n  )\n}\n\nconst Page = () => {\n  return (\n    <div>\n      <Ditto \n        projectId=\"project_609c2013654b7400c681310e\"\n        textId=\"text_609c20134107df0099db7bc6\"\n      />\n      <Ditto \n        projectId=\"project_609c2013654b7400c681310e\"\n        frameId=\"frame_609c20134107df0099db7bc0\"\n        blockId=\"heading\"\n      >\n        {(value) => Object.keys(value).map(id => <p key={id}>{value[id]}</p>)}\n      </Ditto>\n    </div>\n  )\n}\n\nexport default App;\n","import './index.css'\n\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}